# -*- coding: utf-8 -*-
"""SCT_ML_2.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/18pR-AbM9tei1DecIMJfRnvTFYJqnRXK5
"""

import pandas as pd
from sklearn.preprocessing import StandardScaler
from sklearn.cluster import KMeans
import matplotlib.pyplot as plt

data = pd.read_csv('/content/Mall_Customers.csv')

X = data[['Annual Income (k$)', 'Spending Score (1-100)']]

scaler = StandardScaler()
X_scaled = scaler.fit_transform(X)

inertia = []
K_range = range(1, 11)

for k in K_range:
    kmeans = KMeans(n_clusters=k, random_state=42)
    kmeans.fit(X_scaled)
    inertia.append(kmeans.inertia_)

plt.figure(figsize=(8, 5))
plt.plot(K_range, inertia, marker='o', linestyle='--')
plt.xlabel('Number of clusters (K)')
plt.ylabel('Inertia')
plt.title('Elbow Method for Optimal K')
plt.show()

plt.figure(figsize=(8, 5))
plt.plot(K_range, inertia, marker='o', linestyle='--')
plt.xlabel('Number of clusters (K)')
plt.ylabel('Inertia')
plt.title('Elbow Method for Optimal K')
plt.show()

data['Cluster'] = kmeans.labels_

plt.figure(figsize=(8, 5))
plt.scatter(X_scaled[:, 0], X_scaled[:, 1], c=kmeans.labels_, cmap='viridis', marker='o', edgecolor='k')
plt.scatter(kmeans.cluster_centers_[:, 0], kmeans.cluster_centers_[:, 1], s=300, c='red', marker='X', label='Centroids')
plt.xlabel('Annual Income (scaled)')
plt.ylabel('Spending Score (scaled)')
plt.title('Customer Segments Based on K-means Clustering')
plt.legend()
plt.show()

import numpy as np

np.random.seed(42)  # for reproducible results
data['Frequency of Purchase'] = np.random.randint(1, 12, size=len(data))

data['Recency (days)'] = np.random.randint(1, 365, size=len(data))

data['Average Transaction Value'] = np.random.randint(20, 200, size=len(data))

data.head()

from sklearn.preprocessing import StandardScaler
from sklearn.cluster import KMeans
import matplotlib.pyplot as plt

X_extended = data[['Annual Income (k$)', 'Spending Score (1-100)', 'Frequency of Purchase', 'Recency (days)', 'Average Transaction Value']]

scaler = StandardScaler()
X_scaled_extended = scaler.fit_transform(X_extended)

inertia = []
K_range = range(1, 11)

for k in K_range:
    kmeans = KMeans(n_clusters=k, random_state=42)
    kmeans.fit(X_scaled_extended)
    inertia.append(kmeans.inertia_)

plt.figure(figsize=(8, 5))
plt.plot(K_range, inertia, marker='o', linestyle='--')
plt.xlabel('Number of clusters (K)')
plt.ylabel('Inertia')
plt.title('Elbow Method for Optimal K with Extended Features')
plt.show()

optimal_k = 5
kmeans_extended = KMeans(n_clusters=optimal_k, random_state=42)
kmeans_extended.fit(X_scaled_extended)

data['Cluster_Extended'] = kmeans_extended.labels_

data.head()